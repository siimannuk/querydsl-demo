plugins {
  id 'org.springframework.boot' version '2.1.2.RELEASE'
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java']
    }
    resources {
      srcDirs = ['src/main/resources']
    }
  }
  generated {
    java {
      srcDirs = ['src/generated/java']
    }
  }
  test {
    resources {
      srcDirs = ['src/test/resources', 'db']
    }
  }
}

idea {
  module {
    sourceDirs += file(sourceSets.generated.java.srcDirs[0])
  }
}

dependencies {
  implementation (
    libraries.spring.boot_starter_jpa,
    libraries.spring.boot_starter_json,
    libraries.spring.boot_starter,
    libraries.hibernate,
    libraries.postgresql,
    libraries.querydsl.jpa,
    libraries.commons.io,
    libraries.p6spy
  )

  annotationProcessor (
    "${libraries.querydsl.apt}:jpa", // generates QueryDSL classes
    libraries.hibernate,
    libraries.lombok
  )

  testImplementation (
    libraries.spring.boot_test,
    libraries.postgresql,
    libraries.p6spy
  )
}

compileJava {
  options.annotationProcessorPath = configurations.annotationProcessor
  options.annotationProcessorGeneratedSourcesDirectory = sourceSets.generated.java.srcDirs[0]
}

compileGeneratedJava {
  classpath += sourceSets.main.runtimeClasspath
}

clean {
  delete sourceSets.generated.java.srcDirs[0]
}

def mainClass = 'com.siimannuk.querydsldemo.ServerMain'
task runQueryDslDemo(type: JavaExec) {
  main = mainClass
  classpath = sourceSets.main.runtimeClasspath
}
